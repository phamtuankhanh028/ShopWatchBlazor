@page "/login"
@using ShopWatch.Client.Services.Authentication
@using System.Net
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ILocalStorageService LocalStorage
@inject NavigationManager navManager 
@inject AuthenticationStateProvider authStateProvider

<section class="product spad">
    <div class="container">
        <div class="row">
            <div class="col-12 mt-5">
                <div class="checkout__form">
                    <h4>Login</h4>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 col-md-12">
               
                    <div class="checkout__input">
                        <p>Username</p>
                        <input id="username" @bind="loginRequest.UserName"></input>
                    </div>
                    <div class="checkout__input">
                        <p>Password</p>
                        <input type="password" id="password" @bind="loginRequest.Password"></input>
                    </div>
                    <button @onclick="Authenticate" type="submit" class="site-btn">Subscribe</button>
                
            </div>
        </div>
    </div>
</section>
@code {
     private LoginRequest loginRequest = new LoginRequest();

    private async Task Authenticate()
    {
        var loginResponse = await httpClient.PostAsJsonAsync<LoginRequest>("/api/Account/Login", loginRequest);

        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            navManager.NavigateTo("/", true);
        }
        else if (loginResponse.StatusCode == HttpStatusCode.Unauthorized)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
    }

}
